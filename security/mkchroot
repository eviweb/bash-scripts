#! /bin/bash
# this script aims to help with the setup of a chroot environment
#
# it is inspired by the script found here:
# @see http://how-to.linuxcareer.com/how-to-automatically-chroot-jail-selected-ssh-user-logins
#

# define a variable content using heredoc
function define()
{
    IFS=$''
    read -d '' ${1} || true;
    unset IFS
}

# Help message
define Usage << "HELP"

Usage: chroot [OPTIONS] COMMANDS
Options:
    -h          display this message
    -d          directory in which setup the chroot tree (default: /home/jail)
    -v          increase verbosity

create the chroot root directory if it does not exists, and copy the specified
COMMANDS and their dependencies in a similar tree as their initial one under the
chroot root directory
HELP

# print the help message
function usage()
{
    echo -e "$Usage"
}

# if no given parameters, abort
if [ $# -eq 0 ]
then
    usage
    exit 1
fi

# default command line options
OPTIONS=":hd:v"

# default chroot directory
CHROOT_DIR="/home/jail"

# verbose default value
VERBOSE=0

# get command line options
while getopts $OPTIONS option
do
    case $option in
        d) CHROOT_DIR=${OPTARG};;
        v) VERBOSE=1;;
        h | *) usage && exit 0 || exit 1;;
    esac
done
shift $(($OPTIND - 1 ))

function log()
{
    local message="$1"

    if [[ ${VERBOSE} -eq 1 ]]; then
        echo -e "> ${message}"
    fi
}

# checks for root privileges
function checkPrivileges()
{
    log "Check: user privileges"
    [ `whoami` != 'root' ] \
        && echo "You need root privileges to run this script." \
        && exit 1
}

# checks the chroot root directory
function checkChrootDirectory()
{
    log "Check: ${CHROOT_DIR} exists"
    [ ! -e "${CHROOT_DIR}" ] && mkdir -p ${CHROOT_DIR}
    [ ! -d "${CHROOT_DIR}" ] \
        && echo "Directory: ${CHROOT_DIR} must be valid." \
        && exit 1
}

# duplicate a subtree (symlinks + files), starting from a given file and so under
# a target directory
function copy()
{
    local current="$1"
    local target="$2"
    local next=$(readlink "${current}")

    if [ -n "${next}" ] && [ "$(dirname ${next})" == "." ]; then
        log "Link: ${next} for: ${current} is in the same directory"
        next=$(dirname ${current})/${next}
    fi

    log "Should copy: ${current} to: ${target}${current}"
    if [ -e "${current}" ]; then
        log "Copy: ${current} to: ${target}${current}"
        cp --parents -u -d "${current}" "${target}"
    fi

    if [ -n "${next}" ] && [ "${next}" != "${current}" ]; then
        log "Follow link: ${current} -> ${next}"
        copy "${next}" "${target}"
    fi
}

# copy the given command dependencies
function copyDependencies()
{
    local current="$1"
    local target="$2"

    log "Look for dependencies of: ${current}"
    for dependency in $( ldd $1 | grep -v dynamic | cut -d " " -f 3 | sed 's/://' | sort | uniq )
    do
        log "Dependency found: ${dependency} for: ${current}"
        copy "${dependency}" "${target}"
    done
}

# copy architecture library
function copyArch()
{
    local amd64="/lib64/ld-linux-x86-64.so.2"
    local i386="/lib/ld-linux.so.2"
    local target="$1"

    log "Copy amd64 architecture library"
    copy "${amd64}" "${target}"
    log "Copy i386 architecture library"
    copy "${i386}" "${target}"
}

# performs some environment checking
checkPrivileges
checkChrootDirectory

# performs the duplication
for command in $*; do
    copy "${command}" "${CHROOT_DIR}"
    copyDependencies "${command}" "${CHROOT_DIR}"
done
copyArch "${CHROOT_DIR}"

exit 0
